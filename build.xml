<project name="dnsjava" default="all" basedir=".">
    <property name="build.dir" value="${basedir}/build/classes"/>
    <property name="src.dir" value="${basedir}/src"/>
    <property name="dist.dir" value="${basedir}/dist"/>
    <property name="tests.build.dir" location="${basedir}/build/test" />  
    <property name="tests.dir" value="${basedir}/tests"/>
    <property name="reports.dir" value="${basedir}/reports"/>
    
    <property name="doc_dir" value="${basedir}/doc"/>
    
    <property name="version" value="3.0.0"/>
    <property name="jarname" value="dnsjava-${version}.jar"/>
    <property name="zipname" value="dnsjava-${version}.zip"/>
    <property name="targzname" value="dnsjava-${version}.tar.gz"/>

    <!-- import ivy -->
    <property name="lib.dir" value="${basedir}/lib"/>
    <import file="${basedir}/lib/ivy/common.xml" />    


    <property name="j2se.javadoc"
      value="http://java.sun.com/j2se/1.4/docs/api/"/>

    <target name="all" description="Compile and Jar" depends="jar">
    </target>
    
    
    <target name="-prep">
      <delete dir="${reports.dir}"/>
      <delete dir="${dist.dir}"/>
      <delete dir="${build.dir}"/>
      <delete dir="${tests.build.dir}"/>
      <mkdir dir="${tests.build.dir}"/>
      <mkdir dir="${build.dir}"/>
      <mkdir dir="${dist.dir}"/>
      <mkdir dir="${reports.dir}"/>
    </target>
    

    <target name="compile" depends="-prep" description="Compile Project">
      <javac destdir="${build.dir}" debug="true" includeantruntime="false">
	      <src path="${src.dir}"/>
	      <!-- todo
	      <compilerarg value="-Xlint" />
	      -->
      </javac>
    </target>

    <target name="spi" description="Compile the Name Service Provider code">
	<javac destdir="${build_dir}" debug="true" includeantruntime="false">
	    <src path="${src_dir}"/>
	    <include name="com/ultradns/dnsjava/dns/spi/*.java"/>
	</javac>
    </target>

    <target name="jar" description="Makes dnsjava.jar" depends="git-version,compile">
        <echo message="version=${full.version}" file="${dist.dir}/${ant.project.name}.properties" append="false" />
	<jar jarfile="${dist.dir}/${jarname}"
		basedir="${build.dir}" includes="**/*.class **/*.properties">
	    <exclude name="com/ultradns/dnsjava/dns/tests/*.class"/>
	    <exclude name="tests/**"/>
	    <manifest>
		<attribute name="Implementation-Title" value="dnsjava"/>
		<attribute name="Implementation-Version" value="${full.version}"/>
	    </manifest>
	    <metainf dir="${src.dir}/com/ultradns/dnsjava/dns/spi/">
		<include name="services/*"/>
	    </metainf>
	</jar>
    </target>
<!-- todo, update this 	
	<target name="bundle" description="Creates an OSGi bundle" depends="jar">
		<get src="http://www.aqute.biz/repo/biz/aQute/bnd/0.0.384/bnd-0.0.384.jar"
			dest="${build_dir}/bnd.jar"/>
		<taskdef resource="aQute/bnd/ant/taskdef.properties"
			classpath="${build_dir}/bnd.jar"/> 
		<echo file="${dist_dir}/dnsjava-${version}.bnd" append="false">
			Bundle-Version: ${version}
			Bundle-Name: dnsjava is an implementation of DNS in Java
			Bundle-SymbolicName: com.ultradns.dnsjava.dns
			Export-Package: com.ultradns.dnsjava.dns;version=${version},com.ultradns.dnsjava.dns.spi;version=${version},com.ultradns.dnsjava.dns.utils;version=${version},com.ultradns.dnsjava.dns.windows;version=${version}
			Bundle-Vendor: ultradns.com
			Bundle-RequiredExecutionEnvironment: J2SE-1.4
			Import-Package: !com.ultradns.dnsjava.dns*,!sun.*,*
		</echo>
		<bndwrap
			definitions="${dist_dir}"
			jars="${dist_dir}/${jarname}"
			output="${dist_dir}/com.ultradns.dnsjava.dns_${version}.jar"/>
		<delete file="${dist_dir}/dnsjava-${version}.bnd"/>
	</target>
-->

    <target name="clean" depends="-prep" description="Remove old class files">
    </target>

    <target name="docs" description="Makes Javadoc documentation">
	<javadoc destdir="${doc_dir}"
		 sourcepath="${src_dir}"
		 packagenames="com.ultradns.dnsjava.dns,com.ultradns.dnsjava.dns.utils,com.ultradns.dnsjava.dns.spi"
		 windowtitle="dnsjava documentation">

	    <link href="${j2se.javadoc}"/>
	</javadoc>
    </target>

    <target name="docsclean" description="Remove old documentation">
	<delete dir="${doc_dir}"/>
    </target>

    <target name="reportsclean" description="Remove old reports">
	<delete dir="${reports.dir}"/>
    </target>

    <property name="source_excludes"
	      value="**/*.class,${jarname},${zipname},${targzname}" />

    <target name="sourcedist" description="Builds source distributions"
	    depends="compile,docs">
	<zip destfile="${dist_dir}/${zipname}">
	    <zipfileset dir="${src_dir}" prefix="dnsjava-${version}"
			excludes="${source_excludes}" />
	</zip>
	<tar destfile="${dist_dir}/${targzname}" compression="gzip">
	    <tarfileset dir="${src_dir}" prefix="dnsjava-${version}"
			excludes="${source_excludes}" />
	</tar>
    </target>

    <target name="compile-tests" depends="compile" description="Compiles Unit Tests">
      <javac destdir="${tests.build.dir}" debug="true" includeantruntime="false">
	      <src path="${tests.dir}"/>
	      <exclude name="**/*Luna*.java"/>
        <classpath>
          <fileset dir="${lib.dir}/test" includes="*.jar" excludes="ant.jar"/>
          <pathelement location="${build.dir}" />
        </classpath>
      </javac>
    </target>

    <target name="test" depends="clean-resolve">
      <path id="tests_classpath">
        <path location="${build.dir}"/>
        <path location="${basedir}"/>
        <path location="${tests.build.dir}"/>
      </path>
      <antcall target="-run-tests">
        <reference torefid="classpath_name" refid="tests_classpath"/>
      </antcall>
    </target>

    <target name="-run-tests" depends="compile-tests">
      <mkdir dir="${reports.dir}/units"/>
      <junit fork="yes" forkmode="perTest" 
             dir="${basedir}" printsummary="yes"
             haltonerror="on" haltonfailure="on">

          <classpath>
	      <path refid="classpath_name"/>
              <fileset dir="${lib.dir}/test" includes="*.jar" excludes="ant.jar"/> 
          </classpath>
          <formatter type="xml"/>
          <test name="${testcase}" if="testcase"/>
	  <batchtest unless="testcase" todir="${reports.dir}/units">
              <fileset dir="${tests.build.dir}">
	          <include name="**/*Test.class"/>
	      </fileset>
          </batchtest>
      </junit>
    </target>
    
    <target name="restyle">
      <exec executable="astyle">
        <arg line=" -A2 -s --mode=java -H -c -j --recursive ${src.dir}/*.java"/>
      </exec>
    </target>
    
    <target name="coverage_report" depends="clean,compile-tests" if="jcoverage_dir">
      <taskdef resource="tasks.properties">
	<classpath>
		<path location="${jcoverage_dir}/jcoverage.jar"/>
		<path location="${jcoverage_dir}/lib/log4j/1.2.8/*.jar"/>
		<path location="${jcoverage_dir}/log4j.jar"/>
		<path location="${jcoverage_dir}/bcel.jar"/>
		<path location="${jcoverage_dir}/oro.jar"/>
		<path location="${jcoverage_dir}/gnu.getopt.jar"/>
	</classpath>
      </taskdef>
      <instrument todir="${basedir}/iclasses">
	<fileset dir="${basedir}">
	  <include name="**/*.class"/>
	  <exclude name="iclasses/**"/>
	  <exclude name="tests/**"/>
	</fileset>
	<ignore regex="com.ultradns.dnsjava.dns.Tokenizer$*"/>
      </instrument>
      <path id="itests_classpath">
	<path location="${basedir}/iclasses"/>
	<path location="${tests_dir}"/>
	<path location="${jcoverage_dir}/jcoverage.jar"/>
	<path location="${jcoverage_dir}/lib/log4j/1.2.8/*.jar"/>
	<path location="${jcoverage_dir}/log4j.jar"/>
	<path location="${jcoverage_dir}/bcel.jar"/>
	<path location="${jcoverage_dir}/oro.jar"/>
	<path location="${jcoverage_dir}/gnu.getopt.jar"/>
      </path>
      <antcall target="-run-tests">
	<param name="classpath_name" value="itests_classpath"/>
      </antcall>
      <report srcdir="${basedir}" destdir="${reports.dir}/coverage"/>
      <delete dir="${basedir}/iclasses"/>
    </target>

</project>
